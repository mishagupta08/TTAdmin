@model TTGarmentAdmin.Models.DashboardModel
@*@using GridMvc.Html*@
@{
    ViewBag.Title = "Registered Retailer";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@*<link href="@Url.Content("~/Content/Gridmvc.css")" rel="stylesheet" />
    <link href="@Url.Content("~/Content/bootstrap.min.css")" rel="stylesheet" />*@

<style>
    table.grid-table .grid-header > .grid-header-title {
        margin-right: 10px !important;
    }

    #dataTable {
        font-size: 10px;
    }

    .search-button-style {
        display: inline-block;
        width: 13%;
        height: 36px;
        margin-left: 5%;
        margin-top: -5px;
    }

    .box-style {
        width: 25% !important;
        display: inline-block !important;
        height: 38px !important;
        margin: 0px 29px !important;
    }

    table.grid-table {
        font-size: 10px;
    }

    .image-col-width {
        width: 20px !important;
    }
</style>

@helper CustomRenderingOfActionColumn(string MemberId)
{
    <a href="@Url.Action("GetRetailerEditView", "Dashboard", new { retailerId = MemberId })"><img src="~/images/edit.png" height="20" name="editMember" /></a>
}
@helper CustomRenderingOfAddressColumn(string Address, string Pincode)
{
    <span>@Address</span>
    <br />
    <span>Pin : @Pincode</span>
}
@helper CustomRenderingOfDistributerColumn(string name, string city, string mobileNo)
{
    <div>
        <span>Distributer Name:</span>

        @if (string.IsNullOrEmpty(name))
        {
            <span>-</span>
        }
        else
        {
            <span>@name</span>
        }
    </div>
    <div>
        <span>Distributer City:</span>

        @if (string.IsNullOrEmpty(city))
        {
            <span>-</span>
        }
        else
        {
            <span>@city</span>
        }
    </div>
    <div>
        <span>Distributer Mobile:</span>

        @if (string.IsNullOrEmpty(mobileNo))
        {
            <span>-</span>
        }
        else
        {
            <span>@mobileNo</span>
        }
    </div>
}

@helper CustomRenderingOfPersonalDetailColumn(string Email, string city, string state)
{
    <div>
        <span>EMail:</span>

        @if (string.IsNullOrEmpty(Email))
        {
            <span>-</span>
        }
        else
        {
            <span>@Email</span>
        }
    </div>
    <div>
        <span>City:</span>

        @if (string.IsNullOrEmpty(city))
        {
            <span>-</span>
        }
        else
        {
            <span>@city</span>
        }
    </div>
    <div>
        <span>State:</span>

        @if (string.IsNullOrEmpty(state))
        {
            <span>-</span>
        }
        else
        {
            <span>@state</span>
        }
    </div>
}

@helper CustomRenderingOfLocationColumn(string LocationLink, string dviceLocationLink)
{
if (string.IsNullOrEmpty(LocationLink))
{
        <span>Shop Location : -</span>
}
else
{
        <span>Shop Location :  <a href="@LocationLink" target="_blank">Click Here..</a></span>
}

if (string.IsNullOrEmpty(dviceLocationLink))
{
        <span>Shop Location : -</span>
}
else
{
        <span>Registration Location :  <a href="@dviceLocationLink" target="_blank">Click Here..</a></span>
}
}

@helper CustomRenderingOfLogoColumn(string logo)
{
    <img src="@logo" height="50" width="50" />
}

@*****Retailer DT*******@
<div class="card mb-3" id="responseContainer">
    <div class="card-header">
        <i class="fa fa-table"></i> Registered Retailer
        <button id="export" class="btn btn-info btn-sm left btn-block text-uppercase waves-effect waves-light" style="float: right;  width: 10% !important;  margin: 0px !important;">Export</button>
        <div style="display:none;">@Html.Raw(Model.TableString)</div>
    </div>
    @*/**filters**/*@
    <form data-parsley-validate style="margin-top:10px; margin-left:50px;" class="validateForm form-horizontal" id="retailerSearchForm" onsubmit="return SearchRetailerDetail();">
        <div class="form-group" style="display:inline-block;">
            <label>Filter Type</label>
            @Html.DropDownListFor(m => m.FilterDetail.SelectedFilterName, new SelectList(Model.FilterDetail.FilterName), new { @required = "0", id = "filterList", name = "filters", @class = "form-control" })
        </div>
        <div class="form-group" style="display:inline-block; margin-left:6%">
            <label>Filter Value</label>
            @Html.TextBoxFor(m => m.FilterDetail.FilterValue, new { @id = "filterValue", @required = "required", @class = "form-control", @style = "height: 38px;", @placeholder = "Value" })
        </div>
        <br />
        <div class="form-group" style="display:inline-block;">
            <label>From Date</label>
            @Html.TextBoxFor(m => m.FilterDetail.FromDate, new { @id = "fromDate", @required = "required", @class = "form-control", @style = "height: 38px;", @placeholder = "Value" })
        </div>

        <div class="form-group" style="display:inline-block; margin-left:6%">
            <label>To Date</label>
            @Html.TextBoxFor(m => m.FilterDetail.ToDate, new { @id = "toDate", @required = "required", @class = "form-control", @style = "height: 38px;", @placeholder = "Value" })
        </div>
        <button id="searchButton" data-view="Retailer" type="button" class="search-button-style btn btn-info btn-sm left btn-block text-uppercase waves-effect waves-light">Search</button>
    </form>
    @*/**filters**/*@
    <div class="card-body">
        @if (Model.RetailerList == null || Model.RetailerList == null || Model.RetailerList.Count == 0)
            {
            <div>No record Found</div>
            }
            else
            {
            <div class="table-responsive">
                <table class="table table-bordered" id="dataTable" width="100%" cellspacing="0">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Shop Logo</th>
                            <th>Firm Name</th>
                            <th>Distributer Detail</th>
                            <th>Address</th>
                            <th>Credential Detail</th>
                            <th>Personal Detail</th>
                            <th>Current Points</th>
                            <th>Total Earned Points</th>
                            <th>Gps Detail</th>
                            <th>Location</th>
                            <th>Registration Date</th>
                            <th>Is Active</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var retailer in Model.RetailerList)
                        {
                            <tr>
                                <td>@retailer.ID</td>
                                <td>@CustomRenderingOfLogoColumn(retailer.ShopLogo)</td>
                                <td>@retailer.FirmName</td>
                                <td>@Html.Raw(retailer.DetailedDistributer)</td>
                                <td>@Html.Raw(retailer.DetailedAddress)</td>
                                <td>@Html.Raw(retailer.CredentialDetail)</td>
                                <td>@Html.Raw(retailer.PersonalDetail)</td>
                                <td>@retailer.Points</td>
                                <td>@retailer.TotalEarned</td>
                                <td>@Html.Raw(retailer.GPSDetail)</td>
                                <td>@CustomRenderingOfLocationColumn(retailer.LocationLink, retailer.DeviceLocationLink)</td>
                                <td>@retailer.RegistrationDate</td>
                                <td>@retailer.IsActive</td> 
                                <td>@retailer.IsBlock</td>                                
                                <td>
                                    @CustomRenderingOfActionColumn(retailer.ID)
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            }
    </div>
</div>
@*******Retailer DT *********@

@*<div class="col-lg-12" style="margin-left: 5px;" id="responseContainer">
        @if (Model.RetailerList == null || Model.RetailerList == null || Model.RetailerList.Count == 0)
        {
            <div>No record Found</div>
        }
        else
        {
            /**filters**/
            <form data-parsley-validate class="validateForm form-horizontal" id="retailerSearchForm" onsubmit="return SearchRetailerDetail();">
                <div class="form-group" style="display:inline-block;">
                    <label>Filter Type</label>
                    @Html.DropDownListFor(m => m.FilterDetail.SelectedFilterName, new SelectList(Model.FilterDetail.FilterName), new { @required = "0", id = "filterList", name = "filters", @class = "form-control" })
                </div>
                <div class="form-group" style="display:inline-block; margin-left:6%">
                    <label>Filter Value</label>
                    @Html.TextBoxFor(m => m.FilterDetail.FilterValue, new { @id = "filterValue", @required = "required", @class = "form-control", @style = "height: 38px;", @placeholder = "Value" })
                </div>

                <button id="searchButton" data-view="Retailer" type="button" class="search-button-style btn btn-info btn-sm left btn-block text-uppercase waves-effect waves-light">Search</button>
            </form>


            <button id="export" class="btn btn-info btn-sm left btn-block text-uppercase waves-effect waves-light" style="float: right;  width: 10% !important;  margin: 0px !important;">Export</button>
            <div style="display:none;">@Html.Raw(Model.TableString)</div>
            @Html.Grid(Model.RetailerList).Columns(columns =>
       {
           columns.Add(c => c.ID).Encoded(false).Sanitized(false).Titled("ID").Filterable(true);
           columns.Add().Encoded(false).Titled("Shop Logo").Sanitized(false).RenderValueAs(o => CustomRenderingOfLogoColumn(o.ShopLogo));
           columns.Add(c => c.FirmName).Encoded(false).Sanitized(false).Titled("Firm Name").Filterable(true);
           columns.Add(c => c.DetailedDistributer).Encoded(false).Sanitized(false).Titled("Distributer Detail").Filterable(true);
           columns.Add(c => c.DetailedAddress).Encoded(false).Sanitized(false).Titled("Address").Filterable(true);
           //columns.Add(c => c.Mobile).Encoded(false).Sanitized(false).Titled("Mobile").Filterable(true);
           columns.Add(c => c.CredentialDetail).Encoded(false).Sanitized(false).Titled("Credential Detail").Filterable(true);
           columns.Add(c => c.PersonalDetail).Encoded(false).Sanitized(false).Titled("Personal Detail").Filterable(true);
           //columns.Add(c => c.Password).Encoded(false).Sanitized(false).Titled("Password").Filterable(true);
           columns.Add(c => c.Points).Encoded(false).Sanitized(false).Titled("Points").Filterable(true);
           columns.Add(c => c.GPSDetail).Encoded(false).Sanitized(false).Titled("Gps Detail").Filterable(true);
           columns.Add().Encoded(false).Titled("Location").Sanitized(false).RenderValueAs(o => CustomRenderingOfLocationColumn(o.LocationLink, o.DeviceLocationLink));
           columns.Add(c => c.RegistrationDate).Encoded(false).Sanitized(false).Titled("Registration Date").Filterable(true);
           columns.Add(c => c.IsActive).SetWidth(220).Encoded(false).Sanitized(false).Titled("Is Active").Filterable(true);
           columns.Add().Encoded(false).Titled("Action").Sanitized(false).RenderValueAs(o => CustomRenderingOfActionColumn(o.ID));
       }).WithPaging(15).Sortable(true)
        }
    </div>*@

<script src="@Url.Content("~/Scripts/jquery-1.10.2.min.js")"></script>
@*<script src="@Url.Content("~/Scripts/gridmvc.min.js")"></script>*@

<script src="~/Scripts/jquery.min.js"></script>
<script src="~/Scripts/jquery-ui.min.js"></script>

<script src="~/Scripts/Project/dashboard.js"></script>
<script src="~/Scripts/jquery.table2excel.min.js"></script>

<script>
    var jq = $.noConflict();
    jq(".preloader").hide();
    jq('#fromDate').datepicker({
    });
    jq('#toDate').datepicker({
    });
    jq(document).ready(function () {
        if (jq("#export").length > 0) {
            jq("#export").unbind();
            jq("#export").click(function () {
                jq("#retailerStringTable").unbind();
                var dateToday = new Date();
                jq("#retailerStringTable").table2excel({
                    exclude: ".noExl",
                    name: "Excel Document Name",
                    filename: "RegisteredRetailer-" + dateToday,
                    fileext: ".xls",
                    exclude_img: true,
                    exclude_links: true,
                    exclude_inputs: true
                });
            });
        }
    });
</script>